swagger: '2.0'
info:
  version: '1.0.0'
  title: SwaggerStandardDescription
  description: |

    [//]: (=====================================================================)
    [//]: (The_following_are_the_API_document_that_must_be_included_for_each_API)
    [//]: (=====================================================================)

    _Provide an overview of the API_

    #### Service Functionality:
    _Provide brief description on what this service will do and how can service consumer make use of it._
    
    #### Performance Expectation:
    _Provide performance information for service consumer, such as the throughput, response time per transaction, etc._
    
    #### Service Capacity Supported:
    _Provide capacity information for service consumer, such as the maximum transactions can support per day, etc._
    
    #### Suggested Test Scenario:
    _Provide testing strategies and scenarios that can help out service consumer to conduct their testing._
    
    #### Service Availability:
    _Describe the service availability, such as 24 x 7, scheduled downtime, etc._
    
    #### Service Security:
    _Provide any special instruction if the service needs to be executed with certain security constrain.  (Do NOT list user name and password on this document)_

    [//]: (=====================================================================)
    [//]: (The_above_are_the_API_document_that_must_be_included_for_each_API)
    [//]: (=====================================================================)


    [//]: (==============================================================)
    [//]: (Sample_Markdown_As_Reference_Only___REMOVE_BEFORE_PUBLISHING!!)
    [//]: (==============================================================)
    ---
    # These are the supported Markdown:

    ## Basic formatting

    Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.

    Paragraphs must be separated by a blank line. Basic formatting of *italics*, **bold** and `monospace` is supported. This *can be **nested** like* so.

    ## Lists

    ### Ordered list

    1. Item 1
    2. A second item
    3. Number 3
    4. â…£

    *Note: the fourth item uses the Unicode character for [Roman numeral four][2].*

    ### Unordered list

    * An item
    * Another item
    * Yet another item
    * And there's more...

    ## Paragraph modifiers

    ### Code block

        Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.

    You can also make `inline code` to add code into other things.

    ### Quote

    > Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.

    ## Headings

    There are six levels of headings. They correspond with the six levels of HTML headings. You've probably noticed them already in the page. Each level down uses one more hash character.

    ### Headings *can* also contain **formatting**

    ### They can even contain `inline code`

    Of course, demonstrating what headings look like messes up the structure of the page.

    I don't recommend using more than three or four levels of headings here, because, when you're smallest heading isn't too small, and you're largest heading isn't too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.

    ## URLs

    URLs can be made in a handful of ways:

    * A named link to [MarkItDown][3]. The easiest way to do these is to select what you want to make a link and hit `Ctrl+L`.
    * Another named link to [MarkItDown](http://www.markitdown.net/)
    * Sometimes you just want a URL like <http://www.markitdown.net/>.

    ## Horizontal rule

    A horizontal rule is a line that goes across the middle of the page.

    ---

    It's sometimes handy for breaking things up.

    ## Images

    Markdown can also contain images. 
    ![Image of Yaktocat](https://www.infarmbureau.com/assets/images/footer/footer_logo.png)

    ## Finally

    There's actually a lot more to Markdown than this. See the official [introduction][4] and [syntax][5] for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.
    ---
    [//]: (==============================================================)
    [//]: (Sample_Markdown_As_Reference_Only___REMOVE_BEFORE_PUBLISHING!!)
    [//]: (==============================================================)

  contact:
    name: Name of the Development Team
    email: who@infambureau.com
    url: if you have one

basePath: /api
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json


paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      operationId: findPets
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: pet response
          schema:
            type: array
            items:
              $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      produces:
        - application/json
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/newPet'
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
definitions:
  pet:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: string
  newPet:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: string
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
