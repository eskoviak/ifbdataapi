swagger: '2.0'
info:
  version: 1.0.0 SNAPSHOT
  title: memberships
  description: "This is the entry point for membership inquiries against the record-keeping\
    \ system.\n\n#### Service Functionality\nThis API is called with a `membershipId`\
    \ parameter.  If successful, the resultant resource is a\nJSON oject, based on\
    \ the Membership model.\n\n#### Model Diagram\n ![Membership](http://connections/issite/ews/SiteAssets/Membership%20Model.png)\n\
    \n#### Performance Expectation\nStandard SLA applies.\n\n#### Service Capacity\
    \ Supported\nStandard Capacity applies\n\n#### Suggested Test Scenario\nTBD\n\n\
    #### Service Availability\nStandard Service Availability applies\n\n#### Service\
    \ Security\nHTTPS/SSL\n"
  contact: {name: Enterprise Web Services Team, email: EWSDevelopers@infambureau.com,
    url: 'http://connections/issite/ews/SitePages/Home.aspx'}
host: ap-karafa-dev:8181
produces: [application/json]
schemes: [http, https]
basePath: /api/memberships
paths:
  /{membershipId}/:
    get:
      x-auth-type: Application & Application User
      x-scope: api_read
      x-throttling-tier: Unlimited
      description: Returns a Membership
      parameters:
      - {name: membershipId, required: true, in: path, description: The membership
          number in the record-keeping system., type: string}
      responses:
        '200':
          description: Successful response
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  description: 'A membership is a requirement for the purchase of
                    any IFB product.  It is a stand-

                    alone entity, which is billed and paid for separately from any
                    other premium.

                    '
                  properties:
                    id: {description: The member's unique membership number, type: string}
                    membershipNumber: {description: The database value of the membership
                        id, type: string}
                    paidStatus:
                      description: The member's paid status
                      enum: [Paid, Unpaid]
                    membershipType:
                      enum: [Primary, Student, Select]
                    membershipTypeCode: {type: string}
                    membershipClass:
                      description: 'voting - has a voting interest in an agricultural
                        concern

                        associate - ordinary non-voting membership

                        '
                      enum: [Voting, Associate]
                    membershipClassCode: {type: string}
                    membershipCode: {description: Individual or business membership,
                      type: string}
                    longevityDate: {description: The date the membership was purchased,
                      type: string, format: date}
                    termEffectiveDate: {type: string, format: date}
                    termExpirationDate: {type: string, format: date}
                    paidToDate: {type: string, format: date}
                    clientCounty: {description: The county that is specifically associated
                        with the Client and this membership., type: string}
                    clientCountyCode: {type: string}
                    clientTownship: {description: The township that is specifically
                        associated with the Client and this membership., type: string}
                    clientTownshipCode: {type: string}
                    overrideCounty: {description: 'Use the Client''s county by default
                        unless this value overrides

                        ', type: string}
                    overrideCountyCode: {type: string}
                    overrideTownship: {description: 'Use the Client''s township by
                        default unless this value overrides

                        ', type: string}
                    overrideTownshipCode: {type: string}
                    clientId: {description: The Client id associated with the Membership,
                      type: string}
                    doNotRenew: {description: Membership will not renew after term
                        date, type: boolean}
        '401': {description: Unauthorized or invalid token}
        '404': {description: Entity not found}
        '500': {description: Server error}
