swagger: '2.0'
info:
  version: 2.0.0
  title: clients
  description: "This is the entry point for client inquiries.\n\n#### Service Functionality\n\
    This API is called with a clientId parameter.  If successful, the resultant resource\
    \ is a\nJSON oject, based on the Client model.\n\n#### Instance Diagram(s) \n\
    ![Client](http://connections/issite/ews/SiteAssets/path-clients.png)\n\n#### Performance\
    \ Expectation\nStandard SLA applies.\n\n#### Service Capacity Supported\nStandard\
    \ Capacity applies\n\n#### Suggested Test Scenario\nTBD\n\n#### Service Availability\n\
    Standard Service Availability applies\n\n#### Service Security\nHTTPS/SSL\n"
  contact: {name: Mary Boscaccia, url: 'http://www.infarmbureau.com', email: mary.Boscacci@infarmbureau.com}
produces: [application/json]
schemes: [https]
basePath: /clients
paths:
  /{clientId}/:
    get:
      x-auth-type: Application & Application User
      x-scope: api_read
      x-throttling-tier: Unlimited
      summary: Returns a array of Client models identified by the clientId
      description: 'This process layer service queries the client record keeping system
        (Exceed) using the submitted parameter (clientId).   A detailed Client is
        returned, if the clientId exists.

        '
      produces: [application/json]
      parameters:
      - {$ref: '#/parameters/ClientId'}
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              data:
                type: array
                items: {$ref: '#/definitions/Client'}
        '401': {description: Unauthorized or invalid token}
        '404': {description: Entity not found}
        '500': {description: Server error}
  /{clientId}/interests:
    get:
      x-auth-type: Application & Application User
      x-scope: api_read
      x-throttling-tier: Unlimited
      summary: An array of Interests for the given clientId
      description: This process layer service queries the policy record keeping system,
        and returns an array of interests (relationships) between the client identified
        by the clientId and insurance objects.
      produces: [application/json]
      parameters:
      - {$ref: '#/parameters/ClientId'}
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              data:
                type: array
                items: {$ref: '#/definitions/Interest'}
        '404': {description: Entity not found}
parameters:
  ClientId: {name: clientId, required: true, in: path, description: The clientId used
      to identify the client which is the object of the request., type: string}
definitions:
  Client:
    description: 'A Client object represents a legal entity with a defined relationship
      to the insurance policy or

      annuity contract.  A the model represents either a person (i.e. the insured
      or the annuitant),

      an organization (i.e. a bank or assignee), or it can be Unknown (i.e. a trust,
      which can be either

      a person or an organization).

      '
    properties:
      id: {description: A unique identifier for the client, type: string}
      sourceSystemType:
        description: "The type of client as recorded on the source system.  Note:\
          \ either `sourceSystemType` or \n`sourceSystemTypeCode` is required.\n"
        type: [string, 'null']
      sourceSystemTypeCode:
        description: 'The type code of client as recorded on the source system. Note:
          either `sourceSystemType`

          or `sourceSystemTypeCode` is required.

          '
        type: [string, 'null']
      name:
        description: 'A display-formatted name of the individual or business for this
          Client.  For an organization, this is

          the legal name of the organization.  For an individual, this would be the
          `concatenated` name, which is

          stored on the system.  If the individual''s name is to be modeled as name
          components, use the `personName`

          property.

          '
        type: [string, 'null']
      personName: {description: "The component parts of the Client name, when the\
          \ Client represents an individual, if known.  For individuals, \neither\
          \  `name` or `personName` property should be populated.  It is expected\
          \ that this property will be null\nfor organizations.\n", $ref: '#/definitions/PersonName'}
      phoneNumbers:
        type: array
        items: {$ref: '#/definitions/Phone'}
      emailAddresses:
        type: array
        items: {$ref: '#/definitions/Email'}
      taxId:
        description: 'This is a government assigned identifier.  In the US, this is
          either the Tax ID Number (TIN) for a business

          or the Social Security Number (SSN) for and individual.

          '
        type: [string, 'null']
      addresses:
        type: array
        items: {$ref: '#/definitions/Address'}
      preferences: {description: 'A schemaless object key/value pairs representing
          Client preferences

          This is used for configuring contact preferences.

          ', type: object}
      demographics: {$ref: '#/definitions/Demographics'}
  PersonName:
    description: 'This model contains name details for a person.  It is based on the
      ACORD PersonName_Type (PCS)

      and OLifE/Party/Person (LAH).

      '
    properties:
      firstName:
        description: 'First (or Given) name of the person.

          '
        type: [string, 'null']
      middleName:
        description: 'All middle names.

          '
        type: [string, 'null']
      lastName:
        description: 'Last name (surname) of the person.

          '
        type: [string, 'null']
      titlePrefix:
        description: 'Any phrase to precede the name which is not part of the actual
          name,

          such as Dr. or Mrs.

          '
        type: [string, 'null']
      nameSuffix:
        description: "Any phrase to succeed the name which is not par tof the actual\
          \ name, \nsuch as `Jr.` or `III.`\n"
        type: [string, 'null']
  Phone:
    description: Phone model
    properties:
      phoneNumber: {description: 'The phone number in the ITU-T E.164.1 Format,

          ', type: string, format: e.164.1}
      phoneType:
        description: 'These enumerations are sourced from Exceed Client

          '
        enum: [Alternate, Business, Contact, Emergency, Fax, Account, Home, Vacation,
          Work, Cell, Pager, Relative, Toll Free, Unlisted]
      phoneTypeCode: {type: string}
  Email:
    description: Email model
    required: [emailAddress, emailAddressType]
    properties:
      emailAddress: {type: string}
      emailAddressType:
        description: Exceed email code values
        enum: [CON, INC, INO, OAM, OAS, OTH]
  Address:
    description: "Address model--used with various parent objects to describe the\
      \ US Postal Service\nlocation. \n"
    required: [addressType, addressAggregate, street1, street2, city, state, countyCode,
      county, townshipCode, township, postalCode, country]
    properties:
      addressType:
        description: Future use.  If used, SHOULD be set to 'Mailing'.
        enum: [Mailing]
      addressAggregate: {description: 'The aggregate address for use when the individual
          components are not known.

          type: [''string'', ''null'']

          '}
      street1:
        description: First line of the postal address, e.g. 100 Main St.
        type: [string, 'null']
      street2:
        description: Second line of the postal address, e.g. Apt 100.
        type: [string, 'null']
      city:
        type: [string, 'null']
      state:
        description: For domestic addresses, use USPS two-digit state code.
        type: [string, 'null']
      countyCode:
        description: 'Properties countyCode and county are mutually exclusive.  Use
          countyCode when the source

          system provides a two-character code.  If the source is the actual County
          name, then use

          the county property.

          '
        type: [string, 'null']
      county:
        description: 'Properties countyCode and county are mutually exclusive.  Use
          countyCode when the source

          system provides a two-character code.  If the source is the actual County
          name, then use

          the county property.

          '
        type: [string, 'null']
      townshipCode:
        description: 'Properties townshipCode and township are mutually exclusive.  Use
          townshipCode when the source

          system provides a two-character code.  If the source is the actual Township
          name, then use

          the township property.

          '
        type: [string, 'null']
      township:
        description: 'Properties townshipCode and township are mutually exclusive.  Use
          townshipCode when the source

          system provides a two-character code.  If the source is the actual Township
          name, then use

          the township property.

          '
        type: [string, 'null']
      postalCode:
        type: [string, 'null']
      country:
        type: [string, 'null']
  Demographics:
    description: 'Demographic information associated with a client; will be null for
      businesses.

      '
    required: [gender, genderCode, maritalStatus, maritalStatusCode, dateOfBirth,
      dateOfDeath, driversLicenseState, driversLicenseNumber]
    properties:
      gender:
        description: "The gender of the client, if known.  Either `gender` or `genderCode`\
          \ is required. \n"
        enum: [Male, Female, Other, Unknown, 'null']
      genderCode:
        description: 'The system code representing the gender. Either `gender` or
          `genderCode` is required.

          '
        type: [string, 'null']
      maritalStatus:
        description: 'Either `maritalStatus` or `maritalStatusCode` is required

          '
        enum: [Deceased, Estranged, Single, Legally Separated, Married, Divorced,
          Unknown, Widowed, 'null']
      maritalStatusCode:
        description: The system code representing the marital status.
        type: [string, 'null']
      dateOfBirth: {description: The date of birth of the client., type: string, format: date}
      dateOfDeath:
        type: [string, 'null']
        format: date
      driversLicenseState:
        type: [string, 'null']
      driversLicenseNumber:
        type: [string, 'null']
  Interest:
    description: An object which relates two objects via type and id
    required: [rootId, rootType, rootTypeCode, childId, childType, childTypeCode,
      relationshipType, relationshipTypeCode, effectiveDate, expirationDate, address]
    properties:
      rootId: {description: The id of the source object., type: string}
      rootType:
        description: The type of the root object.
        enum: [Policy, Billing Account, Claim, Membership, Quote, Client]
      rootTypeCode:
        description: The type code of the root object.
        type: [string, 'null']
      childId: {description: The id of the target object, type: string}
      childType:
        description: The type of the target object.
        enum: [Policy, Billing Account, Claim, Membership, Quote, Client]
      childTypeCode:
        description: The type code of the target object.
        type: [string, 'null']
      relationshipType: {description: The relationship between the root and target
          object., type: string}
      relationshipTypeCode:
        description: The code for the relationship between the root and target object.
        type: [string, 'null']
      effectiveDate: {type: string, format: date}
      expirationDate:
        type: [string, 'null']
        format: date
      address: {$ref: '#/definitions/Address'}
